#Importing the data in to variable
sms_raw<- read.csv(file.choose(), stringsAsFactors = FALSE) 

#Structure of SMS_RAW and converting the same into vector
str(sms_raw)
sms_raw$type
sms_raw$type <- factor(sms_raw$type)


#Viewing it into a tabular format
table(sms_raw$type)

#Intstalling Text mining packages to remove unwanted texts
install.packages("tm")
library(tm)

#Creating a corpus to store all sms and viewing it document
sms_corpus<-Corpus(VectorSource(sms_raw$text))
print(sms_corpus)

#Viewing the first 3 messages
inspect(sms_corpus[1:3])

#Removing unwanted texts
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers) 
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords()) 
corpus_clean <- tm_map(corpus_clean, removePunctuation) 
corpus_clean <- tm_map(corpus_clean, stripWhitespace) 
inspect(corpus_clean[1:3])

#Creating sparse matrix to view the appearance of each words
sms_dtm <- DocumentTermMatrix(corpus_clean) 

#Creating Training and testing data for sms_raw,sparse matrix and corpus
sms_raw_train <- sms_raw[1:4169, ]  
sms_raw_test  <- sms_raw[4170:5574, ] 

sms_dtm_train <- sms_dtm[1:4169, ] 
sms_dtm_test  <- sms_dtm[4170:5574, ]

sms_corpus_train <- corpus_clean[1:4169] 
sms_corpus_test  <- corpus_clean[4170:5574]

#To verify the equality in spam
prop.table(table(sms_raw_train$type))
prop.table(table(sms_raw_test$type)) 

#Wordcloud for sms_raw
install.packages("wordcloud") 
library(wordcloud) 

wordcloud(sms_corpus_train, min.freq = 40, random.order = FALSE)

#wordcloud for spam and ham
spam <- subset(sms_raw_train, type == "spam") 
ham <- subset(sms_raw_train, type == "ham")

wordcloud(spam$text, max.words = 40, scale = c(3, 0.5)) 
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5)) 

#Finding frequency used words in the sms and making a dictionary of it.
findFreqTerms(sms_dtm_train, 5) 
sms_dict <- c(findFreqTerms(sms_dtm_train, 5)) 

#Traning and testing data
sms_train <- DocumentTermMatrix(sms_corpus_train,    list(dictionary = sms_dict)) 
sms_test  <- DocumentTermMatrix(sms_corpus_test,    list(dictionary = sms_dict)) 

# convert counts to a factor
convert_counts <- function(x) {
  x <- ifelse(x > 0, 1, 0)
  x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
}

#Applying the above funtion on each row
sms_train <- apply(sms_train, MARGIN = 2, convert_counts) 
sms_test  <- apply(sms_test, MARGIN = 2, convert_counts) 



#####Traning the model on the data######
#Applying Naive Bayes
install.packages("e1071") 
library(e1071)

sms_classifier <- naiveBayes(sms_train, sms_raw_train$type) 


#####Evaluating the model performance#####
sms_test_pred <- predict(sms_classifier, sms_test) 

library(gmodels) 
CrossTable(sms_test_pred, sms_raw_test$type,    prop.chisq = FALSE, prop.t = FALSE,    dnn = c('predicted', 'actual')) 


#####Improving the Model performance#####

sms_classifier2 <- naiveBayes(sms_train, sms_raw_train$type,    laplace = 1) 

sms_test_pred2 <- predict(sms_classifier2, sms_test) 

CrossTable(sms_test_pred2, sms_raw_test$type,    prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,    dnn = c('predicted', 'actual')) 

